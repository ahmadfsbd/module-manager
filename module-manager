#!/bin/bash

# Base paths
MODULES_DIR="/genesandhealth/library-red/modules"
USER_BIN="$HOME/.local/share/modules/bin"
LOADED_LIST="$HOME/.local/share/modules/loaded"

mkdir -p "$USER_BIN"
mkdir -p "$(dirname "$LOADED_LIST")"

load_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"
    local sif="$module_path/singularity.sif"
    local meta="$module_path/meta.yaml"

    if grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "Module '$module_name' is already loaded."
        return 1 
    fi

    if [[ ! -f "$sif" ]]; then
        echo "Missing container: $sif"
        return 1
    fi

    if [[ ! -f "$meta" ]]; then
        echo "Missing meta.yaml for module: $module_name"
        return 1
    fi

    # Mark as loaded
    echo "$module_name" >> "$LOADED_LIST"

    # Read executables from meta.yaml
    local cmds
    cmds=$(yq '.executables[]' "$meta")
    for cmd in $cmds; do
        script_path="$USER_BIN/$cmd"
        cat <<EOF > "$script_path"
#!/bin/bash
exec singularity exec --bind "/finngen:/genesandhealth" "$sif" "$cmd" "\$@"
EOF
        chmod +x "$script_path"
    done

    echo "Module '$module_name' loaded."
}

unload_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"
    local meta="$module_path/meta.yaml"

    if ! grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "Module '$module_name' is already unloaded."
        return 1 
    fi

    if [[ ! -f "$meta" ]]; then
        echo "Missing meta.yaml for module: $module_name"
        return 1
    fi

    # Remove the exported command wrappers
    local cmds
    cmds=$(yq '.executables[]' "$meta")
    for cmd in $cmds; do
        rm -f "$USER_BIN/$cmd"
    done

    # Remove module from loaded list safely
    grep -Fxv "$module_name" "$LOADED_LIST" > "${LOADED_LIST}.tmp"
    mv "${LOADED_LIST}.tmp" "$LOADED_LIST"

    echo "Module '$module_name' unloaded."
}

restore_modules() {
    if [[ ! -f "$LOADED_LIST" ]]; then
        echo "No loaded modules file found at $LOADED_LIST"
        return 1
    fi

    echo "Restoring loaded modules from $LOADED_LIST..."
    rm -f "$USER_BIN"/*

    while IFS= read -r module_name; do
        load_module "$module_name"
    done < "$LOADED_LIST"
}

list_available() {
    echo "Available modules:"
    echo "------------------"
    if [[ -d "$MODULES_DIR" ]]; then
        for mod in "$MODULES_DIR"/*; do
            [[ -d "$mod" ]] && echo "- $(basename "$mod")"
        done
    else
        echo "No modules directory found."
    fi
}

list_loaded() {
    echo "Loaded modules:"
    echo "----------------"
    if [[ ! -s "$LOADED_LIST" ]]; then
        echo "None loaded."
        return
    fi

    while IFS= read -r module_name; do
        echo "- $module_name"
        local meta_file="$MODULES_DIR/$module_name/meta.yaml"
        if [[ -f "$meta_file" ]]; then
            while IFS= read -r cmd; do
                echo "    └─ $cmd"
            done < <(yq '.executables[]' "$meta_file")
        else
            echo "    └─ (No meta.yaml found)"
        fi
    done < "$LOADED_LIST"
}

status_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"
    local meta_file="$module_path/meta.yaml"

    echo "Status for module: $module_name"
    echo "-------------------------------"

    if [[ -d "$module_path" ]]; then
        echo "[OK] Module exists in $MODULES_DIR"
    else
        echo "[X] Module does not exist in $MODULES_DIR"
        return 1
    fi

    if grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "[LOADED] Module is currently loaded"
    else
        echo "[NOT LOADED] Module is not loaded"
    fi

    if [[ -f "$meta_file" ]]; then
        echo "[INFO] Exported commands:"
        yq '.executables[]' "$meta_file" | sed 's/^/    └─ /'
    else
        echo "[WARN] No meta.yaml found"
    fi
}

# --- Entry point ---
case "$1" in
    load)
        load_module "$2"
        ;;
    unload)
        unload_module "$2"
        ;;
    restore)
        restore_modules
        ;;
    list-available)
        list_available
        ;;
    list-loaded)
	list_loaded
	;;
    status)
        status_module "$2"
        ;;
    *)
        echo "Usage: $0 {load|unload|restore|list-available|list-loaded|status} [module_name]"
        ;;
esac

