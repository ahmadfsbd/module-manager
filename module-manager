#!/bin/bash

# Base paths
MODULES_DIR="/genesandhealth/library-red/modules"
USER_BIN="$HOME/.local/share/modules/bin"
LOADED_LIST="$HOME/.local/share/modules/loaded"

mkdir -p "$USER_BIN"
mkdir -p "$(dirname "$LOADED_LIST")"

# Add USER_BIN to PATH if not already
if [[ ":$PATH:" != *":$USER_BIN:"* ]]; then
    export PATH="$USER_BIN:$PATH"
fi

load_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"
    local sif="$module_path/singularity.sif"
    local exports="$module_path/exports"

    if grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "Module '$module_name' is already loaded."
        return 1 
    fi

    if [[ ! -f "$sif" ]]; then
        echo "Missing container: $sif"
        return 1
    fi

    if [[ ! -f "$exports" ]]; then
        echo "Missing exports file: $exports"
        return 1
    fi

    if ! grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "$module_name" >> "$LOADED_LIST"
    fi

    while IFS= read -r cmd; do
        script_path="$USER_BIN/$cmd"
        cat <<EOF > "$script_path"
#!/bin/bash
exec singularity exec --bind "/home/ubuntu/tre-modules:/genesandhealth" "$sif" "$cmd" "\$@"
EOF
        chmod +x "$script_path"
    done < "$exports"

    echo "Module '$module_name' loaded."
}

unload_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"
    local exports="$module_path/exports"

    if ! grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "Module '$module_name' is already unloaded."
        return 1 
    fi

    if [[ ! -f "$exports" ]]; then
        echo "Missing exports file for module: $module_name"
        return 1
    fi

    # Remove the exported command wrappers
    while IFS= read -r cmd; do
        rm -f "$USER_BIN/$cmd"
    done < "$exports"

    # Remove module from the loaded list safely
    if [[ -f "$LOADED_LIST" ]]; then
        grep -Fxv "$module_name" "$LOADED_LIST" > "${LOADED_LIST}.tmp"
        mv "${LOADED_LIST}.tmp" "$LOADED_LIST"
    fi

    echo "Module '$module_name' unloaded."
}

restore_modules() {
    if [[ ! -f "$LOADED_LIST" ]]; then
        echo "No loaded modules file found at $LOADED_LIST"
        return 1
    fi

    echo "Restoring loaded modules from $LOADED_LIST..."
    rm -f "$USER_BIN"/*

    while IFS= read -r module_name; do
        load_module "$module_name"
    done < "$LOADED_LIST"
}

list_modules() {
    echo "Available modules:"
    echo "------------------"
    if [[ -d "$MODULES_DIR" ]]; then
        for mod in "$MODULES_DIR"/*; do
            [[ -d "$mod" ]] && echo "- $(basename "$mod")"
        done
    else
        echo "No modules directory found."
    fi

    echo ""
    echo "Loaded modules:"
    echo "----------------"
    if [[ ! -s "$LOADED_LIST" ]]; then
        echo "None loaded."
        return
    fi

    while IFS= read -r module_name; do
        echo "- $module_name"
        local exports_file="$MODULES_DIR/$module_name/exports"
        if [[ -f "$exports_file" ]]; then
            while IFS= read -r cmd; do
                echo "    ‚îî‚îÄ $cmd"
            done < "$exports_file"
        else
            echo "    ‚îî‚îÄ (No exports file found)"
        fi
    done < "$LOADED_LIST"
}

status_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/$module_name"

    echo "Status for module: $module_name"
    echo "-------------------------------"

    if [[ -d "$module_path" ]]; then
        echo "‚úÖ Module exists in $MODULES_DIR"
    else
        echo "‚ùå Module does not exist in $MODULES_DIR"
        return 1
    fi

    if grep -Fxq "$module_name" "$LOADED_LIST" 2>/dev/null; then
        echo "‚úÖ Module is currently loaded"
    else
        echo "‚ùå Module is not loaded"
    fi

    local exports_file="$module_path/exports"
    if [[ -f "$exports_file" ]]; then
        echo "üìù Exported commands:"
        while IFS= read -r cmd; do
            echo "    ‚îî‚îÄ $cmd"
        done < "$exports_file"
    else
        echo "‚ö†Ô∏è No exports file found"
    fi
}

# --- Entry point ---
case "$1" in
    load)
        load_module "$2"
        ;;
    unload)
        unload_module "$2"
        ;;
    restore)
        restore_modules
        ;;
    list)
        list_modules
        ;;
    status)
        status_module "$2"
        ;;
    *)
        echo "Usage: $0 {load|unload|restore|list|status} [module_name]"
        ;;
esac

# eof
